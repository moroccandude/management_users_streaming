version: '3.8'

services:
  zoo1:
    image: wurstmeister/zookeeper
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image:  wurstmeister/kafka
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:19092,EXTERNAL://0.0.0.0:9092,DOCKER://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      
    depends_on:
      - zoo1



  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra

  pyspark:
    build: 
      context: /pyspark
      dockerfile: Dockerfile
    container_name: spark
    hostname: spark
    ports:
      - "8081:8080"  # Spark Web UI
      - "7077:7077"  # Spark Master
    environment:
      SPARK_MODE: master
    depends_on:
      - kafka1

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka1
    environment:
      KAFKA_BROKER: kafka:9092
    volumes:
      - ./producer:/app
    command: ["python", "app.py"]
  
  # consumer:
  #   build: ./consumer
  #   container_name: consumer
  #   depends_on:
  #     - kafka1
  #   environment:
  #     KAFKA_BROKER: kafka:9092
  #   volumes:
  #     - ./consumer:/app
  #   command: ["python", "app.py"]  

  # streamlit:
  #   build: 
  #    context: ./dashboard
  #    dockerfile: dockerfile
  #   container_name: streamlit_dashboard
  #   depends_on:
  #     - mongodb
  #     - cassandra
  #   ports:
  #     - "8501:8501"
  #   volumes:
  #     - ./dashboard:/app
  #   command: ["streamlit", "run", "app.py"]

volumes:
  mongo_data:
  cassandra_data: